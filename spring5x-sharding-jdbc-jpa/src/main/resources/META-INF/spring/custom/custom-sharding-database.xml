<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:bean="http://www.springframework.org/schema/util"
       xmlns:sharding="http://shardingsphere.apache.org/schema/shardingsphere/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://shardingsphere.apache.org/schema/shardingsphere/sharding http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd">

    <!--druid公共配置-->
    <import resource="classpath:META-INF/spring/druid-common.xml"/>

    <bean id="custom_ds_0" parent="dataSource" init-method="init" destroy-method="close">
        <!--配置mysql -->
        <property name="url" value="${mysql.jdbc.url10}"/>
        <property name="username" value="${mysql.jdbc.username}"/>
        <property name="password" value="${mysql.jdbc.password}"/>
        <property name="validationQuery" value="${mysql.jdbc.validationQuery}"/>
        <property name="driverClassName" value="${mysql.jdbc.driverClassName}"/>
    </bean>
    <bean id="custom_ds_1" parent="dataSource" init-method="init" destroy-method="close">
        <property name="url" value="${mysql.jdbc.url11}"/>
        <property name="username" value="${mysql.jdbc.username}"/>
        <property name="password" value="${mysql.jdbc.password}"/>
        <property name="validationQuery" value="${mysql.jdbc.validationQuery}"/>
        <property name="driverClassName" value="${mysql.jdbc.driverClassName}"/>
    </bean>
    <bean id="globalDataSource" parent="dataSource" init-method="init" destroy-method="close">
        <property name="url" value="${mysql.jdbc.url12}"/>
        <property name="username" value="${mysql.jdbc.username}"/>
        <property name="password" value="${mysql.jdbc.password}"/>
        <property name="validationQuery" value="${mysql.jdbc.validationQuery}"/>
        <property name="driverClassName" value="${mysql.jdbc.driverClassName}"/>
    </bean>

    <!--############标准分片配置-分库：自定义分库策略#############-->

    <!-- 分库策略: 尽量使用sharding:standard-strategy(扩展性强),而不是inline-stragegy-->
    <!--<sharding:inline-strategy id="databaseStrategy" sharding-column="user_id" algorithm-expression="custom_ds_${user_id % 2}" />-->

    <!-- 分库算法：精确分片算法和范围分片算法-->
    <bean id="preciseModuloShardingDatabaseAlgorithm" class="com.zja.algorithm.PreciseModuloShardingDatabaseAlgorithm"/>
    <bean id="rangeModuloShardingDatabaseAlgorithm" class="com.zja.algorithm.RangeModuloShardingDatabaseAlgorithm"/>
    <!-- 分表算法：精确分片算法和范围分片算法-->
    <bean id="preciseModuloShardingTableAlgorithm" class="com.zja.algorithm.PreciseModuloShardingTableAlgorithm"/>
    <bean id="rangeModuloShardingTableAlgorithm" class="com.zja.algorithm.RangeModuloShardingTableAlgorithm"/>

    <!--分库策略：precise-algorithm-ref(必选)，range-algorithm-ref(可选)-->
    <sharding:standard-strategy id="databaseStrategy" sharding-column="user_id"
                                precise-algorithm-ref="preciseModuloShardingDatabaseAlgorithm"
                                range-algorithm-ref="rangeModuloShardingDatabaseAlgorithm"/>

    <!--分表策略：precise-algorithm-ref(必选)，range-algorithm-ref(可选)-->
    <sharding:standard-strategy id="tableStrategy" sharding-column="user_id"
                                precise-algorithm-ref="preciseModuloShardingTableAlgorithm"
                                range-algorithm-ref=""/>

    <!--工作id-->
    <bean:properties id="properties">
        <prop key="worker.id">123</prop>
    </bean:properties>

    <!--主键生成器：默认使用雪花算法生成递增趋势id-->
    <sharding:key-generator id="orderKeyGenerator" type="SNOWFLAKE" column="order_id" props-ref="properties"/>
    <sharding:key-generator id="itemKeyGenerator" type="SNOWFLAKE" column="order_item_id" props-ref="properties"/>

    <!--分片数据源-->
    <sharding:data-source id="shardingDataSource">
        <!--数据库名称，默认数据源globalDataSource，不分片的数据表放默认数据库中-->
        <sharding:sharding-rule data-source-names="custom_ds_0,custom_ds_1,globalDataSource" default-data-source-name="globalDataSource">
            <sharding:table-rules>
                <!-- 分库不分表 -->
                <sharding:table-rule logic-table="t_order" database-strategy-ref="databaseStrategy"
                                     key-generator-ref="orderKeyGenerator"/>
                <sharding:table-rule logic-table="t_order_item" database-strategy-ref="databaseStrategy"
                                     key-generator-ref="itemKeyGenerator"/>
            </sharding:table-rules>

            <!-- 绑定表规则列表,表示分库分表的规则相同,这样万一涉及到多个分片的查询,sharding-jdbc就可以确定分库之间不需要不必要的二次关联,所有的查询都应该如此 -->
            <!--绑定表:分片规则一直的主表和子表-->
            <!--t_order表，其分片键是order_id，其子表t_order_item的分片键也是order_id。在规则配置时将两个表配置成绑定关系，就不会在查询时出现笛卡尔积-->
            <sharding:binding-table-rules>
                <!--logic-tables逻辑表名，如果真实表为空，则把逻辑表名作为真实表名-->
                <!-- 配置绑定表(分片规则相同，一般为主表子表的关系)，若不是绑定表不用配置，否则全路由不会走笛卡尔积 -->
                <sharding:binding-table-rule logic-tables="t_order,t_order_item"/>
            </sharding:binding-table-rules>
            <!--广播表:有一些表是没有分片的必要的，比如省份信息表，全国也就30多条数据，这种表在每一个节点上都是一样的，这种表叫做广播表。-->
            <sharding:broadcast-table-rules>
                <!--当插入10条数据，会存到每个库中的t_address表中，每张表都有完整的表数据10条-->
                <sharding:broadcast-table-rule table="t_address"/>
                <!--<sharding:broadcast-table-rule table="t_"/>-->
            </sharding:broadcast-table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>


</beans>